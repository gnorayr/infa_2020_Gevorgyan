import pygame
from pygame.draw import *
from random import randint
from math import pi, sin, cos

pygame.init()
"""
    screen_x, screen_y - horizontal and vertical size of the screen
    number - number of balls
    v - full velocity
    r = radius of balls
    score - player's score
"""

screen_x = 1200
screen_y = 600
FPS = 1
screen = pygame.display.set_mode((screen_x, screen_y))

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
score = 0
score_2 = 0
number = 2
N = range(number)
v = 2.5
r = 70


def show_score():
    """Draws player's score in top left corner of screen"""
    font = pygame.font.SysFont('arial', 25, True)
    text = font.render("Score: {}".format(score), True, WHITE)
    screen.blit(text, text.get_rect())


def new_ball():
    """draws number new balls
       a - angle
       x, y - coordinates
       v_x, v_y - horizontal and vertical velocity
    """
    global X, Y, A, V_x, V_y, score, score_2

    R = [randint(0, 255) for n in N]
    G = [randint(0, 255) for n in N]
    B = [randint(0, 255) for n in N]
    X = [randint(100, 1100) for n in N]
    Y = [randint(100, 500) for n in N]
    A = [randint(0, int(2 * pi * 100)) for i in N]
    V_x = [v * cos(a / 100) for a in A]
    V_y = [v * sin(a / 100) for a in A]
    score_2 += number
    for i in range(1000):
        for x, y, a, v_x, v_y, n, red, green, blue in zip(X, Y, A, V_x, V_y, N, R, G, B):

            if x - r <= 0:
                V_x[n] = abs(v_x)
            if y - r <= 0:
                V_y[n] = abs(v_y)
            if x + r >= 1200:
                V_x[n] = -abs(v_x)
            if y + r >= 600:
                V_y[n] = -abs(v_y)

            ellipse(screen, (red, green, blue), (x - r, y - r, 2 * r, 2 * r))
            X[n] += v_x
            Y[n] += v_y

            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    finished = True
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_x, mouse_y = pygame.mouse.get_pos()
                    for n in N:
                        if (mouse_x - X[n]) ** 2 + (mouse_y - Y[n]) ** 2 <= r ** 2:
                            score += 1
                            X[n], Y[n] = 2 * screen_x, 2 * screen_y
                            V_x[n], V_y[n] = 0, 0
                            print("score -", score)

        pygame.display.update()
        screen.fill(BLACK)

        show_score()

    if score_2 - score > 0:
        pygame.quit()


clock = pygame.time.Clock()
finished = False

while not finished:
    clock.tick(FPS)
    new_ball()

pygame.quit()
